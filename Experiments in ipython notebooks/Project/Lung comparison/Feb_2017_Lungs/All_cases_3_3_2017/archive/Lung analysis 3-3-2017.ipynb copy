{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "from scipy.stats import wilcoxon  # must import explicitly\n",
    "import seaborn as sns\n",
    "sns.set(style=\"whitegrid\", palette=\"pastel\", color_codes=True)\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def query_data(df, Col, structure, metric):   # helper function to get data, Col = AAA, AXB or diff \n",
    "    return df[Col][(df['structure'] == structure) & (df['metric'] == metric)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def bland_altman_plot(Dm_data, AAA_data, structure, metric, *args, **kwargs):\n",
    "    Dm_data     = np.asarray(Dm_data)\n",
    "    AAA_data     = np.asarray(AAA_data)\n",
    "    z_stat, p_val = wilcoxon(Dm_data, AAA_data)\n",
    "    mean      = np.mean([Dm_data, AAA_data], axis=0)\n",
    "    diff      = Dm_data - AAA_data                   # Difference between data1 and data2\n",
    "    md        = np.mean(diff)                   # Mean of the difference\n",
    "    sd        = np.std(diff, axis=0)            # Standard deviation of the difference\n",
    "\n",
    "    # plt.scatter(mean, diff, *args, **kwargs)\n",
    "    plt.scatter(AAA_data, diff, *args, **kwargs)\n",
    "    plt.axhline(md,           color='red', linestyle='-')\n",
    "    plt.axhline(md + 1.96*sd, color='blue', linestyle='--')\n",
    "    plt.axhline(md - 1.96*sd, color='blue', linestyle='--')\n",
    "    plt.xlabel('AAA Dose (Gy)')\n",
    "    plt.ylabel('AXB - AAA Difference (Gy)')\n",
    "   # plt.title( str(np.round(md, decimals = 3)) + ' Gy (' + str(np.round(md_percent, decimals = 3)) +  ' %) difference with p = ' + str(np.round(p_val, decimals = 3))  + ' for ' + structure + ' and metric ' + metric)\n",
    "    plt.title( str(np.round(md, decimals = 3)) + ' Gy difference with p = ' + str(np.round(p_val, decimals = 3))  + ' for ' + structure + ' and metric ' + metric)\n",
    "    #plt.savefig('BA.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parse data\n",
    "\n",
    "Load data and get in same format as original analysis, even though this is a bit long winded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('metrics_all_7_2_2017.csv')  # import AAA data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data['Case'] = data['patID'].str.split('_').str.get(0)  # get the case ID e.g. case1\n",
    "data['Algo'] = data['patID'].str.split('_').str.get(1)  # get the case ID e.g. case1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = data.drop('patID', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data = data.replace(to_replace='ribs', value='Ribs')    # Fix some lables\n",
    "data = data.replace(to_replace='skin', value='Skin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['BODY', 'GTV', 'Heart', 'Foramen', 'Oesophagus', 'Trachea',\n",
       "       'Bronchial tree', 'L Brachial plex', 'Rt Brachial plex',\n",
       "       'PTV CHEST', 'Lt_Lung', 'Rt_Lung', 'Both Lungs-ITV', 'Skin', 'ITV',\n",
       "       'Ribs', 'Both Lungs', 'Liver'], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['structure'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>observed</th>\n",
       "      <th>metric</th>\n",
       "      <th>structure</th>\n",
       "      <th>Case</th>\n",
       "      <th>Algo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25.617688</td>\n",
       "      <td>D2%</td>\n",
       "      <td>BODY</td>\n",
       "      <td>Case1</td>\n",
       "      <td>AAA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.391388</td>\n",
       "      <td>D5%</td>\n",
       "      <td>BODY</td>\n",
       "      <td>Case1</td>\n",
       "      <td>AAA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.426561</td>\n",
       "      <td>D50%</td>\n",
       "      <td>BODY</td>\n",
       "      <td>Case1</td>\n",
       "      <td>AAA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.046734</td>\n",
       "      <td>D95%</td>\n",
       "      <td>BODY</td>\n",
       "      <td>Case1</td>\n",
       "      <td>AAA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.009347</td>\n",
       "      <td>D99%</td>\n",
       "      <td>BODY</td>\n",
       "      <td>Case1</td>\n",
       "      <td>AAA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    observed metric structure   Case Algo\n",
       "0  25.617688    D2%      BODY  Case1  AAA\n",
       "1  14.391388    D5%      BODY  Case1  AAA\n",
       "2   0.426561   D50%      BODY  Case1  AAA\n",
       "3   0.046734   D95%      BODY  Case1  AAA\n",
       "4   0.009347   D99%      BODY  Case1  AAA"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\RCole02.ROYALSURREY\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:2834: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  **kwargs)\n"
     ]
    }
   ],
   "source": [
    "AAA_df = data[data['Algo'] == 'AAA']\n",
    "AAA_df.rename(columns={'observed': 'AAA'}, inplace=True)    # rename \n",
    "AAA_df = AAA_df.drop('Algo', 1)\n",
    "#AAA_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\RCole02.ROYALSURREY\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:2834: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  **kwargs)\n"
     ]
    }
   ],
   "source": [
    "Dm_df = data[data['Algo'] == 'AXB']\n",
    "Dm_df.rename(columns={'observed': 'Dm'}, inplace=True)    # rename \n",
    "Dm_df = Dm_df.drop('Algo', 1)\n",
    "#Dm_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case</th>\n",
       "      <th>structure</th>\n",
       "      <th>metric</th>\n",
       "      <th>AAA</th>\n",
       "      <th>Dm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D2%</td>\n",
       "      <td>25.617688</td>\n",
       "      <td>25.442482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D5%</td>\n",
       "      <td>14.391388</td>\n",
       "      <td>14.256952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D50%</td>\n",
       "      <td>0.426561</td>\n",
       "      <td>0.395687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D95%</td>\n",
       "      <td>0.046734</td>\n",
       "      <td>0.065460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D99%</td>\n",
       "      <td>0.009347</td>\n",
       "      <td>0.022070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Case structure metric        AAA         Dm\n",
       "0  Case1      BODY    D2%  25.617688  25.442482\n",
       "1  Case1      BODY    D5%  14.391388  14.256952\n",
       "2  Case1      BODY   D50%   0.426561   0.395687\n",
       "3  Case1      BODY   D95%   0.046734   0.065460\n",
       "4  Case1      BODY   D99%   0.009347   0.022070"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AAA_Dm_data = pd.merge(AAA_df, Dm_df, how='inner', on=['metric', 'Case', 'structure'])  # Get merged set\n",
    "AAA_Dm_data = AAA_Dm_data[['Case', 'structure', 'metric', 'AAA', 'Dm']]   # rearrange  \n",
    "AAA_Dm_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "AAA_Dm_data['Dm-AAA'] = AAA_Dm_data.Dm - AAA_Dm_data.AAA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case</th>\n",
       "      <th>structure</th>\n",
       "      <th>metric</th>\n",
       "      <th>AAA</th>\n",
       "      <th>Dm</th>\n",
       "      <th>Dm-AAA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D2%</td>\n",
       "      <td>25.617688</td>\n",
       "      <td>25.442482</td>\n",
       "      <td>-0.175206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D5%</td>\n",
       "      <td>14.391388</td>\n",
       "      <td>14.256952</td>\n",
       "      <td>-0.134436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D50%</td>\n",
       "      <td>0.426561</td>\n",
       "      <td>0.395687</td>\n",
       "      <td>-0.030874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D95%</td>\n",
       "      <td>0.046734</td>\n",
       "      <td>0.065460</td>\n",
       "      <td>0.018727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Case1</td>\n",
       "      <td>BODY</td>\n",
       "      <td>D99%</td>\n",
       "      <td>0.009347</td>\n",
       "      <td>0.022070</td>\n",
       "      <td>0.012723</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Case structure metric        AAA         Dm    Dm-AAA\n",
       "0  Case1      BODY    D2%  25.617688  25.442482 -0.175206\n",
       "1  Case1      BODY    D5%  14.391388  14.256952 -0.134436\n",
       "2  Case1      BODY   D50%   0.426561   0.395687 -0.030874\n",
       "3  Case1      BODY   D95%   0.046734   0.065460  0.018727\n",
       "4  Case1      BODY   D99%   0.009347   0.022070  0.012723"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AAA_Dm_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Case1', 'Case5', 'Case11', 'Case12', 'Case13', 'Case14', 'Case16',\n",
       "       'Case17', 'Case22', 'Case24'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AAA_Dm_data['Case'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['BODY', 'GTV', 'Heart', 'Foramen', 'Oesophagus', 'Trachea',\n",
       "       'Bronchial tree', 'L Brachial plex', 'Rt Brachial plex',\n",
       "       'PTV CHEST', 'Lt_Lung', 'Rt_Lung', 'Both Lungs-ITV', 'Skin', 'ITV',\n",
       "       'Ribs', 'Both Lungs', 'Liver'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AAA_Dm_data['structure'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['D2%', 'D5%', 'D50%', 'D95%', 'D99%', 'D1CC', 'D0.1CC', 'DMAX',\n",
       "       'DSD', 'DRX', 'DHI'], dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AAA_Dm_data['metric'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mean differences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mean_diff_table = AAA_Dm_data.groupby(['structure', 'metric'],as_index=False).mean().pivot(index='structure', columns='metric', values='Dm-AAA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "structures_of_interest = ['PTV CHEST', 'ITV',   'Foramen',   'Skin', 'Ribs']  # 'Oesophagus', 'Heart', 'GTV', 'Liver', 'Trachea', 'Bronchial tree',\n",
    "metrics_of_interest  =  ['DMAX', 'D0.1CC', 'D1CC', 'D5%', 'D50%', 'D95%']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "i = len(structures_of_interest)\n",
    "j = len(metrics_of_interest)\n",
    "wilcox_data = np.zeros((i,j))  # init an empty array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sub_diff_table = mean_diff_table[metrics_of_interest].loc[structures_of_interest]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>metric</th>\n",
       "      <th>DMAX</th>\n",
       "      <th>D0.1CC</th>\n",
       "      <th>D1CC</th>\n",
       "      <th>D5%</th>\n",
       "      <th>D50%</th>\n",
       "      <th>D95%</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>structure</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PTV CHEST</th>\n",
       "      <td>1.0505</td>\n",
       "      <td>0.647495</td>\n",
       "      <td>0.596512</td>\n",
       "      <td>0.568678</td>\n",
       "      <td>0.416584</td>\n",
       "      <td>-0.255466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITV</th>\n",
       "      <td>1.0505</td>\n",
       "      <td>0.582748</td>\n",
       "      <td>0.566858</td>\n",
       "      <td>0.569560</td>\n",
       "      <td>0.455339</td>\n",
       "      <td>0.397561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Foramen</th>\n",
       "      <td>-0.3465</td>\n",
       "      <td>-0.315061</td>\n",
       "      <td>-0.282495</td>\n",
       "      <td>-0.268113</td>\n",
       "      <td>-0.074548</td>\n",
       "      <td>0.006426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Skin</th>\n",
       "      <td>-0.1430</td>\n",
       "      <td>-0.390652</td>\n",
       "      <td>-0.285136</td>\n",
       "      <td>0.419790</td>\n",
       "      <td>-0.023375</td>\n",
       "      <td>0.004468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ribs</th>\n",
       "      <td>0.5060</td>\n",
       "      <td>0.435635</td>\n",
       "      <td>-0.170367</td>\n",
       "      <td>-0.246590</td>\n",
       "      <td>-0.079222</td>\n",
       "      <td>-0.033842</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "metric       DMAX    D0.1CC      D1CC       D5%      D50%      D95%\n",
       "structure                                                          \n",
       "PTV CHEST  1.0505  0.647495  0.596512  0.568678  0.416584 -0.255466\n",
       "ITV        1.0505  0.582748  0.566858  0.569560  0.455339  0.397561\n",
       "Foramen   -0.3465 -0.315061 -0.282495 -0.268113 -0.074548  0.006426\n",
       "Skin      -0.1430 -0.390652 -0.285136  0.419790 -0.023375  0.004468\n",
       "Ribs       0.5060  0.435635 -0.170367 -0.246590 -0.079222 -0.033842"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_diff_table.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "d = AAA_Dm_data  # for convenience just copy\n",
    "\n",
    "j = 0\n",
    "for structure in structures_of_interest:\n",
    "    i = 0\n",
    "    for metric in metrics_of_interest:\n",
    "        A =  d[(d['structure'] == structure) & (d['metric'] == metric)]\n",
    "        D =  A['Dm-AAA']\n",
    "        #wilcox_data[j][i] = my_wilcox(D.values)\n",
    "        z_stat, p_val = wilcoxon(D.values)\n",
    "        wilcox_data[j][i] = p_val\n",
    "        i = i + 1\n",
    "    j = j+ 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "wilcox_data_df = pd.DataFrame(data=wilcox_data,    # values\n",
    "...              index=structures_of_interest,    # 1st column as index\n",
    "...              columns=metrics_of_interest)  # 1st row as the column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DMAX</th>\n",
       "      <th>D0.1CC</th>\n",
       "      <th>D1CC</th>\n",
       "      <th>D5%</th>\n",
       "      <th>D50%</th>\n",
       "      <th>D95%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PTV CHEST</th>\n",
       "      <td>0.028417</td>\n",
       "      <td>0.114128</td>\n",
       "      <td>0.021824</td>\n",
       "      <td>0.059336</td>\n",
       "      <td>0.012515</td>\n",
       "      <td>0.241121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITV</th>\n",
       "      <td>0.028417</td>\n",
       "      <td>0.139414</td>\n",
       "      <td>0.028417</td>\n",
       "      <td>0.059336</td>\n",
       "      <td>0.046853</td>\n",
       "      <td>0.202622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Foramen</th>\n",
       "      <td>0.005005</td>\n",
       "      <td>0.005062</td>\n",
       "      <td>0.005062</td>\n",
       "      <td>0.005062</td>\n",
       "      <td>0.028417</td>\n",
       "      <td>0.332880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Skin</th>\n",
       "      <td>0.683286</td>\n",
       "      <td>0.139414</td>\n",
       "      <td>0.114128</td>\n",
       "      <td>0.005062</td>\n",
       "      <td>0.021824</td>\n",
       "      <td>0.016605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ribs</th>\n",
       "      <td>0.168530</td>\n",
       "      <td>0.202622</td>\n",
       "      <td>0.444587</td>\n",
       "      <td>0.006910</td>\n",
       "      <td>0.009344</td>\n",
       "      <td>0.021824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               DMAX    D0.1CC      D1CC       D5%      D50%      D95%\n",
       "PTV CHEST  0.028417  0.114128  0.021824  0.059336  0.012515  0.241121\n",
       "ITV        0.028417  0.139414  0.028417  0.059336  0.046853  0.202622\n",
       "Foramen    0.005005  0.005062  0.005062  0.005062  0.028417  0.332880\n",
       "Skin       0.683286  0.139414  0.114128  0.005062  0.021824  0.016605\n",
       "Ribs       0.168530  0.202622  0.444587  0.006910  0.009344  0.021824"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wilcox_data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Colour mapping options on http://matplotlib.org/examples/color/colormaps_reference.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xaeb3770>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9, 5))  \n",
    "data = sub_diff_table[wilcox_data_df<0.05]\n",
    "\n",
    "ax3 = sns.heatmap(data, annot=True, linewidths=.5, center=0, vmin = -1.1, vmax = 1.1, cmap='PRGn') #  mask=mask,\n",
    "ax3.set_title('Significant (p<0.05) mean dose differences AXB-AAA (Gy) by metric', size='large');\n",
    "plt.savefig('Lung_wilcox.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Single metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xae5e2f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#structure = 'PTV CHEST'\n",
    "structure = 'ITV'\n",
    "metric = 'D50%'\n",
    "plt.figure(figsize=(5, 4)) \n",
    "bland_altman_plot(query_data(AAA_Dm_data, 'Dm', structure, metric), query_data(AAA_Dm_data, 'AAA',structure, metric), structure, metric)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156    66.950354\n",
       "310    74.081755\n",
       "464    69.628883\n",
       "607    68.480563\n",
       "761    68.723135\n",
       "Name: Dm, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_data(AAA_Dm_data, 'Dm', structure, metric).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case</th>\n",
       "      <th>structure</th>\n",
       "      <th>metric</th>\n",
       "      <th>AAA</th>\n",
       "      <th>Dm</th>\n",
       "      <th>Dm-AAA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>Case1</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>64.965374</td>\n",
       "      <td>64.900700</td>\n",
       "      <td>-0.064674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Case5</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>67.930126</td>\n",
       "      <td>67.877952</td>\n",
       "      <td>-0.052174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>Case11</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>64.871795</td>\n",
       "      <td>65.032941</td>\n",
       "      <td>0.161147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>Case12</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>65.889287</td>\n",
       "      <td>66.211549</td>\n",
       "      <td>0.322262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>Case13</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>64.793739</td>\n",
       "      <td>65.854182</td>\n",
       "      <td>1.060442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>849</th>\n",
       "      <td>Case14</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>62.758152</td>\n",
       "      <td>63.923869</td>\n",
       "      <td>1.165716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>Case16</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>64.280239</td>\n",
       "      <td>64.556241</td>\n",
       "      <td>0.276002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1168</th>\n",
       "      <td>Case17</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>65.804513</td>\n",
       "      <td>66.406596</td>\n",
       "      <td>0.602083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1322</th>\n",
       "      <td>Case22</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>66.714681</td>\n",
       "      <td>66.914450</td>\n",
       "      <td>0.199769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1487</th>\n",
       "      <td>Case24</td>\n",
       "      <td>PTV CHEST</td>\n",
       "      <td>D50%</td>\n",
       "      <td>64.375040</td>\n",
       "      <td>64.870307</td>\n",
       "      <td>0.495268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Case  structure metric        AAA         Dm    Dm-AAA\n",
       "101    Case1  PTV CHEST   D50%  64.965374  64.900700 -0.064674\n",
       "222    Case5  PTV CHEST   D50%  67.930126  67.877952 -0.052174\n",
       "387   Case11  PTV CHEST   D50%  64.871795  65.032941  0.161147\n",
       "552   Case12  PTV CHEST   D50%  65.889287  66.211549  0.322262\n",
       "684   Case13  PTV CHEST   D50%  64.793739  65.854182  1.060442\n",
       "849   Case14  PTV CHEST   D50%  62.758152  63.923869  1.165716\n",
       "1014  Case16  PTV CHEST   D50%  64.280239  64.556241  0.276002\n",
       "1168  Case17  PTV CHEST   D50%  65.804513  66.406596  0.602083\n",
       "1322  Case22  PTV CHEST   D50%  66.714681  66.914450  0.199769\n",
       "1487  Case24  PTV CHEST   D50%  64.375040  64.870307  0.495268"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "structure = 'PTV CHEST'\n",
    "metric = 'D50%'\n",
    "df = AAA_Dm_data[(AAA_Dm_data['structure'] == structure) & (AAA_Dm_data['metric'] == metric)]\n",
    "df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.41658409460164164"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Dm-AAA'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
